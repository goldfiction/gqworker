// Generated by CoffeeScript 1.6.3
(function() {
  var assert, cluster, lib, log;

  assert = require('assert');

  lib = require('./../main.js');

  log = require('util').log;

  cluster = {};

  it('should be able to load', function(done) {
    return done();
  });

  it('should be able to run as thread', function(done) {
    var func1, o;
    func1 = "function method(o){return o.a+o.b}";
    o = {
      a: 3,
      b: 5
    };
    return lib.runAsThread(func1, o, function(e, r) {
      assert(e + ":" + r === "null:8");
      return done();
    });
  });

  it('should be able to run thread handler', function(done) {
    var handler, req, res;
    handler = "function method(o){return o.a+o.b}";
    req = {
      body: {
        a: 3,
        b: 5
      }
    };
    res = {
      send: function(code, text) {
        assert(code + ":" + text === "200:8");
        return done();
      }
    };
    return lib.threadHandler(handler, req, res);
  });

  it('should be able to run forkCluster', function(done) {
    var payload;
    payload = function(o) {
      var app, server;
      app = require('express')();
      app.all('/*', function(req, res) {
        return res.send('process ' + process.pid + ' says hello!').end();
      });
      return server = app.listen(8000, function() {
        return log('Process ' + process.pid + ' is listening to all incoming requests');
      });
    };
    return lib.forkCluster(payload, {
      doNotForkNew: false,
      numWorkers: 4,
      checkMaster: true
    }, function(e, o) {
      cluster = o.cluster;
      assert(cluster.getWorkers().length === 4);
      return setTimeout(function() {
        cluster.getWorkers()[0].send({
          cmd: "terminate"
        });
        cluster.getWorkers()[1].send({
          cmd: "restart"
        });
        return setTimeout(function() {
          assert(cluster.getWorkers().length === 3);
          return done();
        }, 3000);
      }, 1000);
    });
  });

  after(function(done) {
    setTimeout(done, 1000);
    return setTimeout(function() {
      return cluster.shutDownServer(7);
    }, 100);
  });

}).call(this);

/*
//@ sourceMappingURL=test.map
*/
